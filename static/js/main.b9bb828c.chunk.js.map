{"version":3,"sources":["components/reusableComponents/SearchBar.js","state/config.js","state/api.js","state/processor.js","components/App.js","index.js"],"names":["SearchBar","React","memo","handleClick","handleChange","searchInput","offline","handleSubmitHover","submitHover","loading","className","onSubmit","type","onChange","placeholder","value","onClick","disabled","style","backgroundColor","color","cursor","onMouseEnter","onMouseLeave","base","db","esearch","query","efetch","web","key","Api","get","a","axios","searchRes","exec","data","timeout","fetchRes","xml2json","convert","compact","spaces","ignoreDoctype","JSON","parse","extractInfo","pubmedArticles","map","A","result","MedlineCitation","PMID","_text","Article","Journal","JournalIssue","PubDate","MedlineDate","pubDate","Year","Month","Day","ArticleTitle","Abstract","_","isArray","AbstractText","t","_attributes","Label","LastAuthorName","AuthorList","LastAuthor","Author","length","CollectiveName","LastName","Initials","ChemicalList","Chemical","c","NameOfSubstance","MeshHeadingList","MeshHeading","DescriptorName","SearchResults","lazy","App","props","state","navigator","onLine","articles","error","curSearch","bind","window","addEventListener","setState","e","preventDefault","this","trim","curResult","PubmedArticleSet","PubmedArticle","curResponse","console","log","target","bool","Suspense","fallback","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oWA8CeA,G,MA5CGC,IAAMC,MACtB,YAQO,IAPLC,EAOI,EAPJA,YACAC,EAMI,EANJA,aACAC,EAKI,EALJA,YACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,YACAC,EACI,EADJA,QAEA,OACE,yBAAKC,UAAU,UACb,0BAAMC,SAAUR,GACd,2BACES,KAAK,OACLF,UAAU,eACVG,SAAUT,EACVU,YAAY,4BACZC,MAAOV,IAET,2BACEO,KAAK,SACLF,UAAU,gBACVM,QAASb,EACTY,MAAOT,EAAU,UAAY,SAC7BW,SAAUX,GAAWG,EACrBS,MAAO,CACLC,gBAAiBb,EACb,UACAE,GAAeC,EACf,wBACA,UACJW,MAAOd,GAAWE,EAAc,UAAY,UAC5Ca,OAAQf,EAAU,OAAS,WAE7BgB,aAAc,kBAAMf,GAAkB,IACtCgB,aAAc,kBAAMhB,GAAkB,Y,iBCtC5CiB,EAAO,iDACPC,EAAK,SAEEC,EAAU,SAAAC,GACrB,MAAM,GAAN,OAAUH,EAAV,2BAAiCC,EAAjC,iBAA4CE,EAA5C,kBAOWC,EAAS,SAACC,EAAKC,GAC1B,MAAM,GAAN,OAAUN,EAAV,0BAAgCC,EAAhC,sBAAgDK,EAAhD,mBAA8DD,EAA9D,iB,iBCWaE,EAnBH,CACVC,IAAI,WAAD,4BAAE,WAAML,GAAN,uBAAAM,EAAA,+EAEuBC,IAAMF,IAAIN,EAAQC,IAFzC,cAEKQ,EAFL,OAGKN,EAAM,0BAA0BO,KAAKD,EAAUE,MAAM,GACrDP,EAAM,8BAA8BM,KAAKD,EAAUE,MAAM,GAJ9D,SAKsBH,IAAMF,IAAIJ,EAAOC,EAAKC,GAAM,CAAEQ,QAAS,OAL7D,cAKKC,EALL,OAMKC,EAAWC,IAAQD,SAASD,EAASF,KAAM,CAC/CK,SAAS,EACTC,OAAQ,EACRC,eAAe,IAThB,kBAYMC,KAAKC,MAAMN,IAZjB,uGAAF,mDAAC,I,iBCqFSO,EAxFK,SAAAC,GAClB,OAAOA,EAAeC,KAAI,SAAAC,GACxB,IAAMC,EAAS,GAIf,GAFAA,EAAM,KAAWD,EAAEE,gBAAgBC,KAAKC,MAEpCJ,EAAEE,gBAAgBG,QAAQC,QAAQC,aAAaC,QAAQC,YACzDR,EAAM,QACJD,EAAEE,gBAAgBG,QAAQC,QAAQC,aAAaC,QAAQC,YAAYL,UAChE,CACL,IAAIM,EAAU,GACVV,EAAEE,gBAAgBG,QAAQC,QAAQC,aAAaC,QAAQG,OACzDD,GAAO,UAAOV,EAAEE,gBAAgBG,QAAQC,QAAQC,aAAaC,QAAQG,KAAKP,QAExEJ,EAAEE,gBAAgBG,QAAQC,QAAQC,aAAaC,QAAQI,QACzDF,GAAO,WAAQV,EAAEE,gBAAgBG,QAAQC,QAAQC,aAAaC,QAAQI,MAAMR,QAE1EJ,EAAEE,gBAAgBG,QAAQC,QAAQC,aAAaC,QAAQK,MACzDH,GAAO,WAAQV,EAAEE,gBAAgBG,QAAQC,QAAQC,aAAaC,QAAQK,IAAIT,QAE5EH,EAAM,QAAcS,EAGtBT,EAAM,aAAmBD,EAAEE,gBAAgBG,QAAQS,aAAaV,MAEhEH,EAAM,SAAe,GACjBD,EAAEE,gBAAgBG,QAAQU,WACxBC,IAAEC,QAAQjB,EAAEE,gBAAgBG,QAAQU,SAASG,cAC/ClB,EAAEE,gBAAgBG,QAAQU,SAASG,aAAanB,KAAI,SAAAoB,GAC9CA,EAAEC,cACJnB,EAAOc,UAAP,UAAsBI,EAAEC,YAAYC,MAApC,aAA8CF,EAAEf,MAAhD,eAIJH,EAAM,SACJD,EAAEE,gBAAgBG,QAAQU,SAASG,aAAad,OAAS,IAI/D,IAAIkB,EAAiB,GAErB,GAAItB,EAAEE,gBAAgBG,QAAQkB,WAAY,CACxC,IAAIC,EAAaR,IAAEC,QAAQjB,EAAEE,gBAAgBG,QAAQkB,WAAWE,QAC5DzB,EAAEE,gBAAgBG,QAAQkB,WAAWE,OACnCzB,EAAEE,gBAAgBG,QAAQkB,WAAWE,OAAOC,OAAS,GAEvD1B,EAAEE,gBAAgBG,QAAQkB,WAAWE,OACrCD,EAAWG,eACbL,GAAkBE,EAAWG,eAAevB,OAExCoB,EAAWI,WACbN,GAAc,UAAOE,EAAWI,SAASxB,MAA3B,MAEZoB,EAAWK,WACbP,GAAkBE,EAAWK,SAASzB,QA8B5C,OAzBAH,EAAM,WAAiBqB,EAEnBtB,EAAEE,gBAAgB4B,eAChBd,IAAEC,QAAQjB,EAAEE,gBAAgB4B,aAAaC,UAC3C9B,EAAM,cAAoBD,EAAEE,gBAAgB4B,aAAaC,SAAShC,KAChE,SAAAiC,GAAC,OAAIA,EAAEC,gBAAgB7B,SAGzBH,EAAM,cAAoB,CACxBD,EAAEE,gBAAgB4B,aAAaC,SAASE,gBAAgB7B,QAK1DJ,EAAEE,gBAAgBgC,kBAChBlB,IAAEC,QAAQjB,EAAEE,gBAAgBgC,gBAAgBC,aAC9ClC,EAAM,UAAgBD,EAAEE,gBAAgBgC,gBAAgBC,YAAYpC,KAClE,SAAAiC,GAAC,OAAIA,EAAEI,eAAehC,SAGxBH,EAAM,UAAgB,CACpBD,EAAEE,gBAAgBgC,gBAAgBC,YAAYC,eAAehC,QAI5DH,MChFLoC,EAAgBtF,IAAMuF,MAAK,kBAC/B,gCA6HaC,E,kDAzHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXtF,YAAa,GACbC,SAAUsF,UAAUC,OACpBrF,aAAa,EACbsF,SAAU,CAAE,GAAI,IAChBC,MAAO,GACPtF,SAAS,EACTuF,UAAW,IAEb,EAAK5F,aAAe,EAAKA,aAAa6F,KAAlB,gBACpB,EAAK9F,YAAc,EAAKA,YAAY8F,KAAjB,gBACnB,EAAK1F,kBAAoB,EAAKA,kBAAkB0F,KAAvB,gBAbR,E,gEAgBE,IAAD,OAClBC,OAAOC,iBAAiB,WAAW,kBAAM,EAAKC,SAAS,CAAE9F,SAAS,OAClE4F,OAAOC,iBAAiB,UAAU,kBAAM,EAAKC,SAAS,CAAE9F,SAAS,S,kCAGvD+F,GAAI,IAAD,OACbA,EAAEC,iBACFC,KAAKH,SACH,CACE3F,SAAS,GAFb,sBAIE,oCAAAwB,EAAA,oEAEoC,EAAK0D,MAA/BtF,EAFV,EAEUA,YAAayF,EAFvB,EAEuBA,YACnBzF,EAAcA,EAAYmG,QACV5B,OAAS,GAJ7B,sBAKUvE,KAAeyF,GALzB,gBAMQ,EAAKM,SAAS,CACZK,UAAWX,EAASzF,GACpBI,SAAS,EACTuF,UAAW3F,EACX0F,MAAO,KAVjB,wCAa6BhE,EAAIC,IAAI3B,GAbrC,SAac8C,EAbd,QAgBiBuD,kBACPvD,EAAOuD,iBAAiBC,eAElBC,EAAc7D,EAClBI,EAAOuD,iBAAiBC,eAE1Bb,EAASzF,GAAeuG,EACxB,EAAKR,SAAS,CACZN,SAAS,eAAMA,GACfzF,cACAI,SAAS,EACTuF,UAAW3F,EACX0F,MAAO,MAGT,EAAKK,SAAS,CACZ3F,SAAS,EACTsF,MAAO,GACPC,UAAW3F,IAlCvB,gCAuCM,EAAK+F,SAAS,CACZ3F,SAAS,EACTsF,MAAO,qCAzCf,0DA6CIc,QAAQC,IAAI,QAAZ,MACA,EAAKV,SAAS,CAAEL,MAAO,2BAA4BtF,SAAS,IA9ChE,6D,mCAoDS4F,GACXE,KAAKH,SAAS,CAAE/F,YAAagG,EAAEU,OAAOhG,U,wCAGtBiG,GAChBT,KAAKH,SAAS,CAAE5F,YAAawG,M,+BAGrB,IAAD,EASHT,KAAKZ,MAPPtF,EAFK,EAELA,YACAC,EAHK,EAGLA,QACAE,EAJK,EAILA,YACAsF,EALK,EAKLA,SACArF,EANK,EAMLA,QACAuF,EAPK,EAOLA,UACAD,EARK,EAQLA,MAEF,OACE,yBAAKrF,UAAU,OACb,kBAAC,EAAD,CACEP,YAAaoG,KAAKpG,YAClBC,aAAcmG,KAAKnG,aACnBC,YAAaA,EACbC,QAASA,EACTC,kBAAmBgG,KAAKhG,kBACxBC,YAAaA,EACbC,QAASA,IAEX,kBAAC,IAAMwG,SAAP,CAAgBC,SAAU,6CACxB,kBAAC3B,EAAD,CACEO,SAAUA,EACVE,UAAWA,EACXD,MAAOA,EACPtF,QAASA,U,GAlHHR,IAAMkH,WCLxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.b9bb828c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SearchBar = React.memo(\r\n  ({\r\n    handleClick,\r\n    handleChange,\r\n    searchInput,\r\n    offline,\r\n    handleSubmitHover,\r\n    submitHover,\r\n    loading\r\n  }) => {\r\n    return (\r\n      <div className=\"search\">\r\n        <form onSubmit={handleClick}>\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-input\"\r\n            onChange={handleChange}\r\n            placeholder=\"Search Pubmed database...\"\r\n            value={searchInput}\r\n          />\r\n          <input\r\n            type=\"submit\"\r\n            className=\"search-button\"\r\n            onClick={handleClick}\r\n            value={offline ? \"Offline\" : \"Search\"}\r\n            disabled={offline || loading}\r\n            style={{\r\n              backgroundColor: offline\r\n                ? \"#CD5C5C\"\r\n                : submitHover || loading\r\n                ? \"rgba(51, 51, 51, 0.5)\"\r\n                : \"#f0f0f2\",\r\n              color: offline || submitHover ? \"#ffffff\" : \"#383839\",\r\n              cursor: offline ? \"auto\" : \"pointer\"\r\n            }}\r\n            onMouseEnter={() => handleSubmitHover(true)}\r\n            onMouseLeave={() => handleSubmitHover(false)}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default SearchBar;\r\n","const base = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/\";\r\nconst db = \"pubmed\";\r\n\r\nexport const esearch = query => {\r\n  return `${base}esearch.fcgi?db=${db}&term=${query}&usehistory=y`;\r\n};\r\n\r\nexport const esummary = (web, key) => {\r\n  return `${base}esummary.fcgi?db=${db}&query_key=${key}&WebEnv=${web}`;\r\n};\r\n\r\nexport const efetch = (web, key) => {\r\n  return `${base}efetch.fcgi?db=${db}&query_key=${key}&WebEnv=${web}&retmode=xml`;\r\n};\r\n","import axios from \"axios\";\r\nimport { esearch, efetch } from \"./config\";\r\nimport convert from \"xml-js\";\r\n\r\nconst Api = {\r\n  get: async query => {\r\n    try {\r\n      const searchRes = await axios.get(esearch(query));\r\n      const web = /<WebEnv>(\\S+)<\\/WebEnv>/.exec(searchRes.data)[1];\r\n      const key = /<QueryKey>(\\d+)<\\/QueryKey>/.exec(searchRes.data)[1];\r\n      const fetchRes = await axios.get(efetch(web, key), { timeout: 35000 });\r\n      const xml2json = convert.xml2json(fetchRes.data, {\r\n        compact: true,\r\n        spaces: 4,\r\n        ignoreDoctype: true\r\n      });\r\n\r\n      return JSON.parse(xml2json);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\nexport default Api;\r\n","import _ from \"lodash\";\r\n\r\nconst extractInfo = pubmedArticles => {\r\n  return pubmedArticles.map(A => {\r\n    const result = {};\r\n    //Extracting Article ID\r\n    result[\"PMID\"] = A.MedlineCitation.PMID._text;\r\n    //Extracting Publication Date\r\n    if (A.MedlineCitation.Article.Journal.JournalIssue.PubDate.MedlineDate) {\r\n      result[\"PubDate\"] =\r\n        A.MedlineCitation.Article.Journal.JournalIssue.PubDate.MedlineDate._text;\r\n    } else {\r\n      let pubDate = \"\";\r\n      if (A.MedlineCitation.Article.Journal.JournalIssue.PubDate.Year) {\r\n        pubDate += `${A.MedlineCitation.Article.Journal.JournalIssue.PubDate.Year._text}`;\r\n      }\r\n      if (A.MedlineCitation.Article.Journal.JournalIssue.PubDate.Month) {\r\n        pubDate += `-${A.MedlineCitation.Article.Journal.JournalIssue.PubDate.Month._text}`;\r\n      }\r\n      if (A.MedlineCitation.Article.Journal.JournalIssue.PubDate.Day) {\r\n        pubDate += `-${A.MedlineCitation.Article.Journal.JournalIssue.PubDate.Day._text}`;\r\n      }\r\n      result[\"PubDate\"] = pubDate;\r\n    }\r\n    //Extracting Article Title\r\n    result[\"ArticleTitle\"] = A.MedlineCitation.Article.ArticleTitle._text;\r\n    //Extracting Article Abstract\r\n    result[\"Abstract\"] = \"\";\r\n    if (A.MedlineCitation.Article.Abstract) {\r\n      if (_.isArray(A.MedlineCitation.Article.Abstract.AbstractText)) {\r\n        A.MedlineCitation.Article.Abstract.AbstractText.map(t => {\r\n          if (t._attributes) {\r\n            result.Abstract += `${t._attributes.Label}: ${t._text} \\n \\n `;\r\n          }\r\n        });\r\n      } else {\r\n        result[\"Abstract\"] =\r\n          A.MedlineCitation.Article.Abstract.AbstractText._text || \"\";\r\n      }\r\n    }\r\n    //Extracting Last Author to the article\r\n    let LastAuthorName = \"\";\r\n\r\n    if (A.MedlineCitation.Article.AuthorList) {\r\n      let LastAuthor = _.isArray(A.MedlineCitation.Article.AuthorList.Author)\r\n        ? A.MedlineCitation.Article.AuthorList.Author[\r\n            A.MedlineCitation.Article.AuthorList.Author.length - 1\r\n          ]\r\n        : A.MedlineCitation.Article.AuthorList.Author;\r\n      if (LastAuthor.CollectiveName) {\r\n        LastAuthorName += LastAuthor.CollectiveName._text;\r\n      } else {\r\n        if (LastAuthor.LastName) {\r\n          LastAuthorName += `${LastAuthor.LastName._text} `;\r\n        }\r\n        if (LastAuthor.Initials) {\r\n          LastAuthorName += LastAuthor.Initials._text;\r\n        }\r\n      }\r\n    }\r\n\r\n    result[\"LastAuthor\"] = LastAuthorName;\r\n    //Extracting Chemical Names\r\n    if (A.MedlineCitation.ChemicalList) {\r\n      if (_.isArray(A.MedlineCitation.ChemicalList.Chemical)) {\r\n        result[\"ChemicalNames\"] = A.MedlineCitation.ChemicalList.Chemical.map(\r\n          c => c.NameOfSubstance._text\r\n        );\r\n      } else {\r\n        result[\"ChemicalNames\"] = [\r\n          A.MedlineCitation.ChemicalList.Chemical.NameOfSubstance._text\r\n        ];\r\n      }\r\n    }\r\n    //Extracting MESH Terms\r\n    if (A.MedlineCitation.MeshHeadingList) {\r\n      if (_.isArray(A.MedlineCitation.MeshHeadingList.MeshHeading)) {\r\n        result[\"MeshTerms\"] = A.MedlineCitation.MeshHeadingList.MeshHeading.map(\r\n          c => c.DescriptorName._text\r\n        );\r\n      } else {\r\n        result[\"MeshTerms\"] = [\r\n          A.MedlineCitation.MeshHeadingList.MeshHeading.DescriptorName._text\r\n        ];\r\n      }\r\n    }\r\n    return result;\r\n  });\r\n};\r\n\r\nexport default extractInfo;\r\n","import React from \"react\";\nimport \"../styles/App.css\";\nimport SearchBar from \"./reusableComponents/SearchBar\";\nimport Api from \"../state/api\";\nimport extractInfo from \"../state/processor\";\n\nconst SearchResults = React.lazy(() =>\n  import(\"./searchResults/SearchResultsContainer\")\n);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchInput: \"\",\n      offline: !navigator.onLine,\n      submitHover: false,\n      articles: { \"\": [] },\n      error: \"\",\n      loading: false,\n      curSearch: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleSubmitHover = this.handleSubmitHover.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"offline\", () => this.setState({ offline: true }));\n    window.addEventListener(\"online\", () => this.setState({ offline: false }));\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    this.setState(\n      {\n        loading: true\n      },\n      async () => {\n        try {\n          let { searchInput, articles } = this.state;\n          searchInput = searchInput.trim();\n          if (searchInput.length > 0) {\n            if (searchInput in articles) {\n              this.setState({\n                curResult: articles[searchInput],\n                loading: false,\n                curSearch: searchInput,\n                error: \"\"\n              });\n            } else {\n              const result = await Api.get(searchInput);\n              // console.log(result);\n              if (\n                result.PubmedArticleSet &&\n                result.PubmedArticleSet.PubmedArticle\n              ) {\n                const curResponse = extractInfo(\n                  result.PubmedArticleSet.PubmedArticle\n                );\n                articles[searchInput] = curResponse;\n                this.setState({\n                  articles: { ...articles },\n                  searchInput,\n                  loading: false,\n                  curSearch: searchInput,\n                  error: \"\"\n                });\n              } else {\n                this.setState({\n                  loading: false,\n                  error: \"\",\n                  curSearch: searchInput\n                });\n              }\n            }\n          } else {\n            this.setState({\n              loading: false,\n              error: \"Please enter keywords to search!\"\n            });\n          }\n        } catch (e) {\n          console.log(\"error\", e);\n          this.setState({ error: \"Error! Please try again.\", loading: false });\n        }\n      }\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ searchInput: e.target.value });\n  }\n\n  handleSubmitHover(bool) {\n    this.setState({ submitHover: bool });\n  }\n\n  render() {\n    const {\n      searchInput,\n      offline,\n      submitHover,\n      articles,\n      loading,\n      curSearch,\n      error\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <SearchBar\n          handleClick={this.handleClick}\n          handleChange={this.handleChange}\n          searchInput={searchInput}\n          offline={offline}\n          handleSubmitHover={this.handleSubmitHover}\n          submitHover={submitHover}\n          loading={loading}\n        />\n        <React.Suspense fallback={<div>Loading ...</div>}>\n          <SearchResults\n            articles={articles}\n            curSearch={curSearch}\n            error={error}\n            loading={loading}\n          />\n        </React.Suspense>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}